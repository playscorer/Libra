<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>arbitrail</groupId>
	<artifactId>libra</artifactId>
	<version>0.0.3-SNAPSHOT</version>
	<name>Libra</name>

	<repositories>
		<repository>
			<id>sonatype-oss-snapshot</id>
			<snapshots />
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</repository>
		<repository>
			<id>jitpack.io</id>
			<url>https://jitpack.io</url>
		</repository>
	</repositories>

	<properties>
		<!-- Generic properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.9</java.version>

		<!-- SPRING & HIBERNATE / JPA -->
		<spring.version>5.0.4.RELEASE</spring.version>
		<hibernate.version>5.2.13.Final</hibernate.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		
		<!-- Deployment properties for AWS -->
		<aws.user>ec2-user</aws.user>
		<aws.host>54.202.68.108</aws.host>
		<package.name>${project.artifactId}-${project.version}-deploy.zip</package.name>
		
	</properties>

	<dependencies>
		<!-- Common librairies -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.1</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>apache-log4j-extras</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>2.9.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
		</dependency>

		<!-- XChange -->
		<dependency>
			<groupId>org.knowm.xchange</groupId>
			<artifactId>xchange-core</artifactId>
			<version>4.3.5</version>
		</dependency>
		<dependency>
			<groupId>org.knowm.xchange</groupId>
			<artifactId>xchange-hitbtc</artifactId>
			<version>4.3.5</version>
		</dependency>
		<dependency>
			<groupId>org.knowm.xchange</groupId>
			<artifactId>xchange-examples</artifactId>
			<version>4.3.5</version>
		</dependency>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Jaxb -->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.2.11</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.2.11</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.2.11</version>
		</dependency>

		<!-- JPA Vendor -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.gwenn</groupId>
			<artifactId>sqlite-dialect</artifactId>
			<version>master</version>
		</dependency>

		<!-- JDBC Driver -->
		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
			<version>3.21.0.1</version>
		</dependency>

	</dependencies>

	<build>
        <extensions>
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-ssh</artifactId>
                <version>3.0.0</version>
            </extension>
        </extensions>
		<plugins>
		    <!-- configure JAR build -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
				<configuration>
					<archive>
						<manifestEntries>
							<Class-Path>config/</Class-Path>
						</manifestEntries>
					</archive>
                    <excludes>
                        <exclude>*.properties</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- generates an uber jar containing all dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.handlers</resource>
								</transformer>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.schemas</resource>
								</transformer>
								<!-- add Main-Class to manifest file -->
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>arbitrail.libra.Libra</mainClass>
								</transformer>
							</transformers>
							<filters>
								<filter>
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
									</excludes>
								</filter>
							</filters>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- libra resources into config directory -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/config</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>${artifactId}-${spring.profiles.active}.properties</include>
									</includes>
								</resource>
								<resource>
									<directory>src/main/resources/data</directory>
									<includes>
										<include>*-${spring.profiles.active}.xml</include>
									</includes>
								</resource>
								<resource>
									<directory>src/main/resources/data/generated</directory>
									<includes>
										<include>*-${spring.profiles.active}.xml</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Create directory for database -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>create-empty-directory</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<mkdir dir="${basedir}/target/database" />
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Package zip -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>create-distribution</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>assembly/deploy.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Upload zip to aws -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>wagon-maven-plugin</artifactId>
				<version>2.0.0</version>
				<configuration>
					<serverId>ec2-node</serverId>
					<fromDir>${basedir}/target</fromDir>
					<includes>*.zip</includes>
					<url>scp://${aws.user}@${aws.host}</url>
					<toDir>/home/ec2-user</toDir>
				</configuration>
				<executions>
					<execution>
						<id>upload-libra-zip</id>
						<phase>install</phase>
						<goals>
							<goal>upload</goal>
						</goals>
					</execution>
					<execution>
						<id>unzip-libra</id>
						<phase>install</phase>
						<goals>
							<goal>sshexec</goal>
						</goals>
						<configuration>
							<commands>
								<command>unzip -o ${package.name}</command>
								<command>rm ${package.name}</command>
							</commands>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>